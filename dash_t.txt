data _Zero;

data Nat #0 = Zero | Succ (Nat #0);

data List #1 a = Nil | Cons a (List #1 a);

data Bool = False | True;

define tail : ∀ #3. ∀ ?4. List #3 ?4 -> List #3 ?4 = \ xs1 : List #3 ?4. case xs1 of Nil -> Nil [#3] [?4] | Cons x1 xs1' -> xs1';

define not : Bool -> Bool = \ a : Bool. if a then False else True;

define list2 : ∀ #6. List #6 (Bool, Bool) = Cons [#6] [(Bool, Bool)] (False, False) (Cons [#6] [(Bool, Bool)] (True, False) Nil [#6] [(Bool, Bool)]);

define list1 : ∀ #10. List #10 Bool = Cons [#10] [Bool] True (Cons [#10] [Bool] False (Cons [#10] [Bool] True Nil [#10] [Bool]));

define length : ∀ #11. ∀ #12. ∀ ?28. List #11 ?28 -> Nat #12 = \ xs2 : List #11 ?28. case xs2 of Nil -> Zero [#12] | Cons x2 xs2' -> Succ [#12] (length [#11] [#12] [?28] xs2');

define head : ∀ #14. ∀ ?36. List #14 ?36 -> ?36 = \ xs0 : List #14 ?36. case xs0 of Nil -> fail : ?36 | Cons x0 xs0' -> x0;

define fsts : ∀ #15. ∀ #16. ∀ ?41. ∀ ?43. List #15 (?41, ?43) -> List #16 ?41 = \ xs3 : List #15 (?41, ?43). case xs3 of Nil -> Nil [#16] [?41] | Cons xy xs3' -> let (x3, y) = xy in Cons [#16] [?41] x3 (fsts [#15] [#16] [?41] [?43] xs3');

define even : ∀ #18. Nat #18 -> Bool = \ n : Nat #18. case n of Zero -> True | Succ n' -> not (even [#18] n');

define concat : ∀ #19. ∀ #20. ∀ ?56. List #19 ?56 -> List #20 ?56 -> List #20 ?56 = \ xs : List #19 ?56. \ ys : List #20 ?56. case xs of Nil -> ys | Cons x xs' -> Cons [#20] [?56] x (concat [#19] [#20] [?56] xs' ys);

even [#21] (length [#22] [#21] [Bool] (concat [#26] [#22] [Bool] list1 [#26] (fsts [#29] [#22] [Bool] [Bool] list2 [#29])))
