define discard/Nat/inst0 : Nat/inst0 -> () = \ x : Nat/inst0. case x of Zero/inst0 -> () | Succ/inst0 x0 -> let () = discard/Nat/inst0 x0 in ();

data Nat/inst0 = Zero/inst0 | Succ/inst0 Nat/inst0;

define discard/List/inst0 : List/inst0 -> () = \ x1 : List/inst0. case x1 of Nil/inst0 -> () | Cons/inst0 x2 x3 -> let () = discard/List/inst0 x3 in ();

data List/inst0 = Nil/inst0 | Cons/inst0 Bool List/inst0;

define discard/List/inst1 : List/inst1 -> () = \ x4 : List/inst1. case x4 of Nil/inst1 -> () | Cons/inst1 x5 x6 -> let () = discard/List/inst1 x6 in ();

data List/inst1 = Nil/inst1 | Cons/inst1 Bool List/inst1;

define discard/List/inst2 : List/inst2 -> () = \ x7 : List/inst2. case x7 of Nil/inst2 -> () | Cons/inst2 x8 x9 -> let () = discard/List/inst2 x9 in ();

data List/inst2 = Nil/inst2 | Cons/inst2 (Bool, Bool) List/inst2;

data Bool = False | True;

define not : Bool -> Bool = \ a : Bool. if a then False else True;

define list2/inst0 : List/inst2 = Cons/inst2 (False, False) (Cons/inst2 (True, False) Nil/inst2);

define list1/inst0 : List/inst1 = Cons/inst1 True (Cons/inst1 False (Cons/inst1 True Nil/inst1));

define length/inst0 : List/inst0 -> Nat/inst0 = \ xs2 : List/inst0. case xs2 of Nil/inst0 -> Zero/inst0 | Cons/inst0 x10 xs2' -> Succ/inst0 (length/inst0 xs2');

define fsts/inst0 : List/inst2 -> List/inst0 = \ xs3 : List/inst2. case xs3 of Nil/inst2 -> Nil/inst0 | Cons/inst2 xy xs3' -> let (x11, y) = xy in Cons/inst0 x11 (fsts/inst0 xs3');

define even/inst0 : Nat/inst0 -> Bool = \ n : Nat/inst0. case n of Zero/inst0 -> True | Succ/inst0 n' -> not (even/inst0 n');

define concat/inst0 : List/inst1 -> List/inst0 -> List/inst0 = \ xs : List/inst1. \ ys : List/inst0. case xs of Nil/inst1 -> ys | Cons/inst1 x12 xs' -> Cons/inst0 x12 (concat/inst0 xs' ys);

even/inst0 (length/inst0 (concat/inst0 list1/inst0 (fsts/inst0 list2/inst0)))
